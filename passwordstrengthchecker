import string
import math
import re

def is_common_pattern(password: str) -> bool:
    """Detects if the password follows common predictable patterns."""
    patterns = [
        r"^[A-Za-z]{3,}[0-9]{2,}$",              # word + numbers (e.g., 'sulav123')
        r"^[A-Za-z]{3,}[@#!$%^&*]+[0-9]{2,}$",    # word + symbol + numbers (e.g., 'sulav@123')
        r"^[0-9]{4,}$",                           # just digits (e.g., '123456')
        r"^[A-Za-z]{6,}$",                        # just letters (e.g., 'password')
        r"(sulav|admin|password|qwerty|test)",    # common base words
        r"(1234|123|2023|2024|000|111)",          # common digit sequences
    ]
    for pattern in patterns:
        if re.search(pattern, password.lower()):
            return True
    return False


def check_password_strength(password: str) -> tuple[int,list[str]]:
   
    score = 0
    missing=[]
  
    # Check if the password contains at least one character from each required character class
    if any(c.isupper() for c in password):
        score += 1
    else:
        missing.append("uppercase letter")
    if any(c.islower() for c in password):
        score += 1
    else:
        missing.append("lowercase letter")
    if any(c.isdigit() for c in password):
        score += 1
    else:
        missing.append("digit")
    if any(c in string.punctuation for c in password):
        score += 1
    else:
        missing.append("special character")
    
    # Check if the password is long enough
    if len(password) >= 8:
        score += 1
    if len(password) >= 12:
        score += 1
    if len(password) >= 16:
        score += 1
    if len(password) >= 20:
        score += 1
  
    return score,missing

def estimate_entropy(password: str) -> float:
    """Estimate entropy of a password based on character variety and length."""
    pool = 0
    if any(c.islower() for c in password):
        pool += 26
    if any(c.isupper() for c in password):
        pool += 26
    if any(c.isdigit() for c in password):
        pool += 10
    if any(c in string.punctuation for c in password):
        pool += len(string.punctuation)

    return len(password) * math.log2(pool) if pool > 0 else 0

def check_password(password: str) -> None:
    try:
        with open("common.txt", "r") as f:
         common_passwords = set(f.read().splitlines())
    except FileNotFoundError:
        common_passwords-set()

    # Check if the password is too common
    if password in common_passwords:
        print("Password is too common. Your password strength is 0.")
        return
    score,missing= check_password_strength(password)
    entropy = estimate_entropy(password)
    predictable = is_common_pattern(password)

    if predictable:
        print("Warning: Your password follows a predictable pattern (e.g., name + numbers).")
     
    if missing:
        print("This password has missing characterstics")
        for i in missing:
            print(f" -{i}")


    if predictable or entropy < 40:
        print("Password is weak due to low entropy or predictable pattern.")
    elif score<=1:
        print("Password is too weak.")
    elif score == 2:
        print("Password is weak.")
    elif score == 3:
        print("Password is average.")
    
    elif score == 4:
        print("Password is not that strong.")
        
    else:
        print("Password is extremely strong.")

    print(f"Estimated password entropy:{entropy:.2f} bits")

if __name__ == "__main__":
    password = input("Enter password: ")
    check_password(password)
